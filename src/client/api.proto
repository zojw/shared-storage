// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";

package engula.storage.v1.client.api;

import "metadata.proto";

// Upload new blob to store.
// Default impl by cache-server server-side writer that write to cloud vendor
service BlobUploader {
	rpc Upload(BlobRequest) returns (BlobResponse) {}
}

service BlobUploadControl {
	rpc PrepareUpload(PrepareUploadRequest) returns (PrepareUploadResponse) {}
	rpc FinishUpload(FinishUploadRequest) returns (FinishUploadResponse) {}
	rpc RollbackUpload(RollbackUploadRequest) returns (RollbackUploadResponse) {}
}

// Read objects from store.
// Default impl by cache-server's server-side to read from its local cache storage.
service Reader {
	rpc Query(QueryRequest) returns (QueryResponse) {}
}

// Locate stores for keys.
// Default impl by manifest-server's server-side
// Client-side should cache it to support locate complex expression like: a < 1 and b > 1 or c < 1
service Locator {
	rpc LocateForRead(LocateRequest) returns (LocateResponse) {}
	rpc LocateForCompact(LocateRequest) returns (LocateResponse) {}
}

message QueryRequest {
	QueryExp condition = 1;
}

message QueryExp {
}

message QueryResponse {
	repeated Object objects = 1;
}

message Object {
	bytes key = 1;
	Value value = 2;
}

message Value {
	oneof content {
		bytes bytes_value = 1;
	}
}

message KeyRange {
	string bucket = 1;
	bytes start = 2;
	bytes end = 3;
}

message LocateRequest {
	repeated KeyRange ranges = 1;
}

message LocateResponse {
	repeated Location locations = 1;
}

message Location {
	KeyRange range = 1;
	string bucket = 2;
	string blob = 3;
	repeated SpanLoc spans = 4;
	uint32 level = 5;
}

message SpanLoc {
	uint64 span_id = 1;
	uint32 server_id = 2;
}

message PrepareUploadRequest {
	repeated engula.storage.v1.manifest.storage.NewBlob blobs = 1;
}

message PrepareUploadResponse {
	string upload_token = 1;
	repeated Location locations = 2;
}

message FinishUploadRequest {
	string upload_token = 1;
}

message FinishUploadResponse {}

message RollbackUploadRequest {
	string upload_token = 1;
}

message RollbackUploadResponse {}

message BlobRequest {
	string bucket = 1;
	string blob = 2;
	bytes content = 3;
	uint32 request_server_id = 4;
	repeated uint32 replica_servers = 5;
	uint64 span = 6;
}

message BlobResponse {}
